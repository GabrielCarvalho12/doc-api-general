FORMAT: 1A
HOST: https://app.pipefy.com


# Pipefy API

This is the Pipefy API documentation, here you will find the guide on how to get started with the API.

# GraphQL

GraphQL is a query language for APIs created by Facebook in 2012.

**Refs**:
* [facebook.github.io/graphql](http://facebook.github.io/graphql/)
* [graphql.org](http://graphql.org/)

Features:
* Send a GraphQL query to the API and get exactly what you need, nothing more and nothing less. GraphQL queries always return predictable results. 
* GraphQL queries access not just the properties of one resource but also smoothly follow references between them. While typical REST APIs require loading from multiple URLs, GraphQL APIs get all the data your app needs in a single request.

After authenticate to [Pipefy](https://app.pipefy.com/), you can explore the API through the web interface:

[app.pipefy.com/graphiql](https://app.pipefy.com/graphiql)
![GraphiQL](https://raw.githubusercontent.com/pipefy/graphql-api-doc/master/pipefy_graphiql.png?token=ABKZf10D3_5J8dtbHbVupQQ9XTfVqGFHks5YzKrWwA%3D%3D)

# Authentication (OAuth / JWT)

Most of requests will require the OAuth Token, that must be send in request header.

The personal OAuth Token is found at **User Settings** on [Pipefy](https://app.pipefy.com)

|HTTP Header      | Header Value              |
|-----------------|---------------------------|
|Content-Type     | _application/json_        |
|**Authorization**|_Bearer <your_oauth_token>_|



**Refs**:
* [OAuth 2](https://oauth.net/2/)
* [JWT](https://jwt.io/introduction/)


# GraphQL Root Queries 
* Me (User info)
* Organizations (**Optional** parameter: Organizations IDs)
* Organization (**Required** parameter: Organization ID)
* Pipes (**Required** parameter: Pipes ID)
* Pipe (**Required** parameter: Pipe ID)
* Phase (**Required** parameter: Phase ID)
* Cards (**Required** parameter: Pipe ID)
* Card (**Required** parameter: Card ID)

# GraphQL Root Mutations
* Create Card (**Required** parameter: Pipe ID)
* Delete Card (**Required** parameter: Card ID)
* Update Card (**Required** parameter: Card ID)
* Move Card to Phase(**Required** parameters: Card ID, Destination Phase ID)

## Me [/queries{?me}]

Get information about yourself.

- User:
    - ID
    - Name
    - Username
    - Avatar URL
    - Email
    - Locale
    - Timezone

**Request Body**

```
{ 
    query: { 
        me { id, name, username, avatar_url, email, locale, time_zone }
    }
}
```

### Get Me [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_oauth_token

    + Body

            { "query": "{ me { id, name, username, avatar_url, email, locale, time_zone } }" }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
                "data": {
                    "me": {
                        "id": 9999,
                        "name": "Pipefy User",
                        "username": "pipefy.user",
                        "avatar_url": "https://avatar-images.pipefy.com/user-avatar.png",
                        "email": "pipefy.user@pipefy.com",
                        "locale": "en-US",
                        "time_zone": "America/Los_Angeles"
                    }
                }
            }

## Organizations [/queries{?organizations}]

Get the list of Organizations.

- Organizations:
    - ID
    - Name

**Request Body**
```
{ 
    query: { 
        organizations { id, name } 
    }
}
```

### Get organizations [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_oauth_token

    + Body

            { "query": "{ organizations{ id, name} }" }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
                "data": {
                    "organizations": [
                        {
                            "id": "9999",
                            "name": "Pipefy"
                        }
                    ]
                }
            }
            
## Organization [/queries{?organization}]

Get an Organization by Organization ID, with Pipes and Phases.

- Organization:
    - Name
    - Pipes:
        - Name
        - Phases:
            - Name

**Request Body**
```
{ 
    query: { 
        organization(id: 9999) { 
            name
            pipes { 
                name
                phases { name } 
            } 
        } 
    } 
}
```

### Get organization by ID [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_oauth_token

    + Body

            { "query": "{ organization(id: 1){ name, pipes { name, phases { name } } } }" }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
                "data": {
                    "organization": {
                        "name": "Pipefy",
                        "pipes": [
                            {
                                "name": "Developers Team",
                                "phases": [
                                    {
                                        "name": "ToDo"
                                    },
                                    {
                                        "name": "Doing"
                                    },
                                    {
                                        "name": "Done"
                                    }
                                ]
                            },
                            {
                                "name": "Sales Team",
                                "phases": [
                                    {
                                        "name": "To-do"
                                    },
                                    {
                                        "name": "Doing"
                                    },
                                    {
                                        "name": "Done"
                                    }
                                ]
                            }
                        ]
                    }
                }
            }
   
## Pipes [/queries{?pipes}]

Get Pipes by Pipes IDs, with Phases and Cards.

- Pipes:
    - ID
    - Name
    - Phases:
        - Name
        - Cards ([Relay Connections specs](https://facebook.github.io/relay/docs/graphql-connections.html)):
            - Edges:
                - Node (Cards):
                    - ID (Card ID)
                    - Title (Card Title)
                


**Request Body**
```
{
    query: {
        pipes(ids: [1]){
            id
            name
            phases{
                name
                cards(first: 10){
                    edges{
                        node{
                            id
                            title
                        }
                    }
                }
            }
        }
    }
}
```

### Get Pipes by IDs [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_oauth_token

    + Body

            { "query": "{ pipes(ids: [1]){ id, name, phases{ name, cards(first: 10){ edges{ node{ id, title } } } } } }" }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
                "data": {
                    "pipes": [
                        {
                            "id": "1",
                            "name": "Developers Team",
                            "phases": [
                                {
                                    "name": "To-Do",
                                    "cards": {
                                        "edges": [
                                            {
                                                "node": {
                                                    "id": "4",
                                                    "title": "Tuning API Cache"
                                                }
                                            },
                                            {
                                                "node": {
                                                    "id": "5",
                                                    "title": "Measure API Performance =D"
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "Doing",
                                    "cards": {
                                        "edges": [
                                            {   
                                                "node": {
                                                    "id": "3",
                                                    "title": "Create API Documentation ;-)"
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "Done",
                                    "cards": {
                                        "edges": [
                                            {
                                                "node": {
                                                    "id": "2",
                                                    "title": "Improve API"
                                                }
                                            },
                                            {
                                                "node": {
                                                    "id": "1",
                                                    "title": "Measure API Performance =/"
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    ]
                }
            }

## Pipe [/queries{?pipe}]

Get a Pipe by Pipe ID, with Phases and Cards.

- Pipe:
    - ID
    - Name
    - Phases:
        - Name
        - Cards ([Relay Connections specs](https://facebook.github.io/relay/docs/graphql-connections.html)):
            - Edges:
                - Node (Cards):
                    - ID (Card ID)
                    - Title (Card Title)
                


**Request Body**
```
{
    query: {
        pipe(id: 1){
            id
            name
            phases{
                name
                cards(first: 1){
                    edges{
                        node{
                            id
                            title
                        }
                    }
                }
            }
        }
    }
}
```

### Get Pipe by ID [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_oauth_token

    + Body

            { "query": "{ pipe(id: 1){ id, name, phases{ name, cards(first: 1){ edges{ node{ id, title } } } } } }" }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
                "data": {
                    "pipe": {
                        "id": "1",
                        "name": "Developers Team",
                        "phases": [
                            {
                                "name": "To-Do",
                                "cards": {
                                    "edges": [
                                        {
                                            "node": {
                                                "id": "4",
                                                "title": "Tuning API Cache"
                                            }
                                        },
                                        {
                                            "node": {
                                                "id": "5",
                                                "title": "Measure API Performance =D"
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "Doing",
                                "cards": {
                                    "edges": [
                                        {   
                                            "node": {
                                                "id": "3",
                                                "title": "Create API Documentation ;-)"
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "Done",
                                "cards": {
                                    "edges": [
                                        {
                                            "node": {
                                                "id": "2",
                                                "title": "Improve API"
                                            }
                                        },
                                        {
                                            "node": {
                                                "id": "1",
                                                "title": "Measure API Performance =/"
                                            }
                                        }
                                    ]
                                }
                            }
                        ]
                    }
                }
            }
            
## Phase [/queries{?phase}]

Get a Phase by Phase id, with Cards, Fields and Cards Cane Be Moved To Phases.

- Phase:
    - ID
    - Name
    - Cards Count
    - Cards ([Relay Connections specs](https://facebook.github.io/relay/docs/graphql-connections.html)):
        - Edges:
            - Node (Cards):
                - ID (Card ID)
                - Title (Card Title)
    - Fields:
        - ID
    - Cards Can Be Moved To Phases:
        - ID
        - Name


**Request Body**
``` 
{   
    query: {
        phase(id: 2) {
            id
            name
            cards_count
            cards(first: 1) {
                edges {
                    node {
                        id
                        title
                    }
                }
            }
            fields { id }
            cards_can_be_moved_to_phases {
                id
                name
            }
        }
    }
}
```

### Get Phase by ID [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_oauth_token

    + Body

            { "query": "{  phase(id: 2){ id name cards_count cards { edges{ node{ id, title } } } fields { id } cards_can_be_moved_to_phases { id name } } }" }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
                "data": {
                    "phase": {
                        "id": "2",
                        "name": "Doing",
                        "cards_count": 2,
                        "cards": {
                            "edges": [
                                {
                                    "node": {
                                        "id": "1"
                                        "title": "My new card"
                                    }
                                },
                                {
                                    "node": {
                                        "id": "2"
                                        "title": "The second Card"
                                    }
                                }
                            ]
                        },
                        "fields": [
                            {
                                "id": "paid_value"
                            },
                            {
                                "id": "return_value"
                            },
                        ],
                        "cards_can_be_moved_to_phases": [
                            {
                                "id": 4,
                                "name": "To do"
                            },
                            {
                                "id": 5,
                                "name": "Waiting review"
                            }
                        ]
                    }
                }
            }
            
## Cards [/queries{?cards}]

Get Cards by Pipe ID, with Assignees, Child Relations, Fields ...

- Cards (Pipe ID):
    - Edges:
        - Node (Cards):
            - Title (Card Title)
            - Assignees:
                - ID
                - Username
            - Child Relations:
                - Name
                - Cards
            - Fields:
                - Name
                - Value
                - Phase Field

**Request Body**
```
{
    query: {
        cards(pipe_id: 1){
            edges{
                node{
                    title
                    assignees{ id, username }
                    child_relations {
                        name
                        cards { id }
                    }
                    fields {
                        name
                        value
                        phase_field { id }
                    }
                }
            }
        }
    }
}
```

### Get Cards by Pipe ID [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_oauth_token

    + Body

            { "query": "{ cards(pipe_id: 1) { edges { node { title assignees { id, username } child_relations { name, cards { id } } fields { name, value, phase_field { id } } } } } }" }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
                "data": {
                    "cards": {
                        "edges": [
                            {
                                "node": {
                                    "title": "sdfsafsadfsadf",
                                    "assignees": [
                                        {
                                            "id": "6",
                                            "username": "john"
                                        },
                                        {
                                            "id": "8",
                                            "username": "mary"
                                        }
                                    ],
                                    "child_relations": [
                                        {
                                            "name": "Subtasks",
                                            "cards": []
                                        }
                                    ]
                                    "fields": [
                                        {
                                            "name": "Paid Value",
                                            "value": "0",
                                            "phase_field": {
                                                "id": "paid_value"
                                            }
                                        },
                                        {
                                            "name": "Customer Name",
                                            "value": "sdfsafsadfsadf",
                                            "phase_field": {
                                                "id": "customer_name"
                                            }
                                        },
                                        {
                                            "name": "Customer Email",
                                            "value": "sfasf@sdfasfdasdf.com",
                                            "phase_field": {
                                                "id": "customer_email"
                                            }
                                        },
                                    ]
                                }
                            },
                        ]
                    }
                }
            }
            
## Card [/queries{?card}]

Get a Card by Card ID, with Assignees, Child Relations, Fields ...

- Card:
    - Title (Card Title)
    - Assignees:
        - ID
        - Username
    - Child Relations:
        - Name
        - Cards
    - Fields:
        - Name
        - Value
        - Phase Field

**Request Body**
```
{
    query: {
        card(id: 2){
            title
            assignees{ id, username }
            child_relations {
                name
                cards { id }
            }
            fields {
                name
                value
                phase_field { id }
            }
        }
    }
}
```

### Get Card by ID [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_oauth_token

    + Body

            { "query": "{ card(id: 2) { title assignees { id, username } child_relations { name, cards { id } } fields { name, value, phase_field { id } } } }" }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
                "data": {
                    "card": {
                        "title": "sdfsafsadfsadf",
                        "assignees": [
                            {
                                "id": "6",
                                "username": "john"
                            },
                            {
                                "id": "8",
                                "username": "mary"
                            }
                        ],
                        "child_relations": [
                            {
                                "name": "Subtasks",
                                "cards": []
                            }
                        ]
                        "fields": [
                            {
                                "name": "Paid Value",
                                "value": "0",
                                "phase_field": {
                                    "id": "paid_value"
                                }
                            },
                            {
                                "name": "Customer Name",
                                "value": "sdfsafsadfsadf",
                                "phase_field": {
                                    "id": "customer_name"
                                }
                            },
                            {
                                "name": "Customer Email",
                                "value": "sfasf@sdfasfdasdf.com",
                                "phase_field": {
                                    "id": "customer_email"
                                }
                            },
                        ]
                    }
                }
            }
            
## Create Card [/queries{?create_card}]

The endpoint to create a Card, in case of success a query is returned. When `fields_attributes` is passed as parameter, the `field_value` of first field_attribute replaces the card title. 

- Card's Parameters: 
    - Pipe ID
    - Title
    - Due Date
    - Assignee IDs
    - Fields Attributes:
        - Field ID
        - Field Value
    - Label IDs
    - Parent IDs


**Request Body**
```
mutation {
    createCard(input: {
                pipe_id: 1, 
                title: "Card created by a mutation", 
                due_date: "2017-01-15T09:05:06-02:00", 
                assignee_ids: [7], 
                fields_attributes:{ field_id: 1, field_value: "This is a Field Value"}, 
                label_ids: [1]
            }
        )
    {
        card{
            id
            title
            due_date
            assignees { id, username } 
            labels { id, name }
            fields { name, value }
        }
    }
}
```

### createCard(input: params) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_oauth_token

    + Body

            { "query": "mutation{ createCard(input: {pipe_id: 1, title: \"My card created by mutation\", assignee_ids: [6], fields_attributes:{field_id: 1, field_value: \"Charlie\"}}) { card {id, title, due_date, assignees{id, username}, fields {name, value} }}}" }

+ Response 200 (application/json; charset=utf-8)
    
    + Body
    
            {
                "data": {
                    "createCard": {
                        "card": {
                            "id": "32",
                            "title": "Charlie",
                            "due_date": "2017-01-15T09:05:06-02:00",
                            "assignees":[
                                {
                                    "id": "7",
                                    "username": "beth"
                                },
                                {
                                    "id": "8",
                                    "username": "mary"
                                }
                            ],
                            "fields":[
                                {
                                    "name": "Customer Name",
                                    "value": "Charlie"
                                }
                            ]
                        }
                    }
                }
            }

## Delete Card [/queries{?delete_card}]

The endpoint to delete a Card, in case of success a query `"success": true` is returned. 

- Card's Parameter: 
    - Card ID
    
**Request Body**
```
mutation {
    deleteCard(input: { id: 1} ) {
        success
    }
}
```

### deleteCard(input: card_id) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_oauth_token

    + Body

            { "query": "mutation{ deleteCard(input: {id: 42}) { success } }" }

+ Response 200 (application/json; charset=utf-8)
    
    + Body
    
            {
                "data": {
                    "deleteCard": {
                        "success": true
                    }
                }
            }

## Update Card [/queries{?update_card}]

The endpoint to update a Card, in case of success a query is returned. 

- Card's Parameters: 
    - Card ID
    - Title
    - Due Date
    - Assignee IDs
    - Label IDs
    
**Request Body**
```
mutation {
    updateCard(input: {id: 6, title: "New Title", due_date: "2017-01-10T11:15:06-02:00", assignee_ids: [5], label_ids: [2]}) {
        card {
            title
            due_date
            assignees { id, username }
            labels { id, name }
        }
    }
}
```

### updateCard(input: params) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_oauth_token

    + Body

            { "query": "mutation{ updateCard(input: {id: 6, title: \"New Title\", due_date: \"2017-01-10T11:15:06-02:00\", assignee_ids: [6], label_ids: [2]}) { card { title, due_date, assignees { id, username }, labels{ id, name }}}}" }

+ Response 200 (application/json; charset=utf-8)
    
    + Body
    
            {
                "data": {
                    "updateCard": {
                        "card": {
                            "title": "New Title",
                            "due_date": "2017-01-10T11:15:06-02:00",
                            "assignees": [
                                {
                                    "id": "6",
                                    "username": "john"
                                }
                            ],
                            "labels": [
                                {
                                    "id": "2",
                                    "name": "new label"
                                }
                            ]
                        }
                    }
                }
            }

## Move Card To Phase [/queries{?move_card_to_phase}]

The endpoint to move a Card to a Phase, in case of success a card's query is returned. 

- Parameters: 
    - Card ID
    - Destination Phase ID
    
**Request Body**
```
mutation {
    moveCardToPhase(input: {card_id: 1, destination_phase_id: 3}) {
        card{
            title
            current_phase{ id, name }
        }
        
    }
}
```

### moveCardToPhase(input: params) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_oauth_token

    + Body

            { "query": "mutation{ moveCardToPhase(input: {card_id: 15, destination_phase_id: 2}){ card{ title, current_phase{ id, name } } } }" }

+ Response 200 (application/json; charset=utf-8)
    
    + Body
    
            {
                "data": {
                    "moveCardToPhase": {
                        "card": {
                            "title": "Bug 1: System Error",
                            "current_phase": {
                              "id": "2",
                              "name": "Delivery"
                            }
                        }
                    }
                }
            }