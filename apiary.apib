FORMAT: 1A
HOST: https://app.pipefy.com


# Pipefy API

This is Pipefy's API documentation. Here you will find the guidelines for getting started with the API.

# GraphQL

GraphQL is a query language for APIs created by Facebook in 2012.

**Refs**:
* [facebook.github.io/graphql](http://facebook.github.io/graphql/)
* [graphql.org](http://graphql.org/)

Features:
* Send a GraphQL query to the API and get exactly what you need, nothing more and nothing less. GraphQL queries always return predictable results. 
* GraphQL queries access not just the properties of one resource but also smoothly follow references between them. While typical REST APIs require loading from multiple URLs, GraphQL APIs get all the data your app needs in a single request.

After authenticating to [Pipefy](https://app.pipefy.com/), you can explore the API through the following web interface:

[app.pipefy.com/graphiql](https://app.pipefy.com/graphiql)

# Authentication (OAuth / JWT)

Most requests will require the OAuth Token, that must be sent in the request header.

The **personal access token** can be found at the **User Settings** page in [Pipefy](https://app.pipefy.com/tokens)

|    HTTP Header    |              Header Value             |
|-------------------|---------------------------------------|
| **Content-Type**  | _application/json_                    |
| **Authorization** | _Bearer <your_personal_access_token>_ |

**Refs**:
* [OAuth 2](https://oauth.net/2/)
* [JWT](https://jwt.io/introduction/)

# Other APIs

- [Database API](http://docs.pipefydatabase.apiary.io)
- [Pipe API](http://docs.pipefypipe.apiary.io)

## Me [/queries{?me}]

Get information about yourself.

- user:
    - id
    - name
    - username
    - avatar url
    - email
    - locale
    - time zone

**Request Body**

```
{ 
    query: { 
        me { id, name, username, avatar_url, email, locale, time_zone }
    }
}
```

### Get Me [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_personal_access_token

    + Body

            { "query": "{ me { id, name, username, avatar_url, email, locale, time_zone } }" }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
                "data": {
                    "me": {
                        "id": 9999,
                        "name": "Pipefy User",
                        "username": "pipefy.user",
                        "avatar_url": "https://avatar-images.pipefy.com/user-avatar.png",
                        "email": "pipefy.user@pipefy.com",
                        "locale": "en-US",
                        "time_zone": "America/Los_Angeles"
                    }
                }
            }

## Organizations [/queries{?organizations}]

Get the list of Organizations.

- organizations:
    - id
    - name

**Request Body**
```
{ 
    query: { 
        organizations { id, name } 
    }
}
```

### Get organizations [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_personal_access_token

    + Body

            { "query": "{ organizations{ id, name} }" }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
                "data": {
                    "organizations": [
                        {
                            "id": "9999",
                            "name": "Pipefy"
                        }
                    ]
                }
            }

## Organization [/queries{?organization}]

Get an organization by organization id, with pipes and phases.

- organization:
    - name
    - pipes:
        - name
        - phases:
            - name

**Request Body**
```
{ 
    query: { 
        organization(id: 9999) { 
            name
            pipes { 
                name
                phases { name } 
            } 
        } 
    } 
}
```

### Get organization by id [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_personal_access_token

    + Body

            { "query": "{ organization(id: 1){ name, pipes { name, phases { name } } } }" }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
                "data": {
                    "organization": {
                        "name": "Pipefy",
                        "pipes": [
                            {
                                "name": "Developers Team",
                                "phases": [
                                    {
                                        "name": "ToDo"
                                    },
                                    {
                                        "name": "Doing"
                                    },
                                    {
                                        "name": "Done"
                                    }
                                ]
                            },
                            {
                                "name": "Sales Team",
                                "phases": [
                                    {
                                        "name": "To-do"
                                    },
                                    {
                                        "name": "Doing"
                                    },
                                    {
                                        "name": "Done"
                                    }
                                ]
                            }
                        ]
                    }
                }
            }

## Create organization [/queries{?create_organization}]

Mutation to create a organization, in case of success a query is returned.

- organization's parameters:
    - industry
    - name

**Request Body**

```
mutation { 
    createOrganization(input: {industry: "technology", name: "Oscorp"}){
        organization{ 
            id
            name
        }
    }
}
```

### createOrganization(input: params) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_personal_access_token

    + Body

            { "query": "mutation { createOrganization(input: {industry: \"technology\", name: \"Oscorp\"}){ organization{ id, name } } }" }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
                "data": {
                    "createOrganization": {
                        "organization": {
                            "id": "1",
                            "name": "Oscorp"
                        }
                    }
                }
            }

## Update organization [/queries{?update_organization}]

Mutation to update a organization, in case of success a query is returned.

- organization's parameters:
    - organization id
    - name
    - only admin can invite users
    - only admin can create pipes
    - force omniauth to normal users

**Request Body**
```
mutation{
    updateOrganization(
        input: {
            id: 5, 
            name: "Capsule Corp.", 
            only_admin_can_invite_users: true 
        }
    ) 
    {
        organization{
            name
            only_admin_can_create_pipes
            only_admin_can_invite_users
            force_omniauth_to_normal_users
        }
    }
}
```

### updateOrganization(input: params) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_personal_access_token

    + Body

            { "query": "mutation{ updateOrganization(input:{id: 5, name: \"Capsule Corp.\", only_admin_can_invite_users: true }) { organization{ name, only_admin_can_create_pipes, only_admin_can_invite_users, force_omniauth_to_normal_users } } }" }
            
+ Response 200 (application/json; charset=utf-8)
    
    + Body
    
            {
                "data": {
                    "updateOrganization": {
                        "organization": {
                            "name": "Capsule Corp.",
                            "only_admin_can_create_pipes": false,
                            "only_admin_can_invite_users": true,
                            "force_omniauth_to_normal_users": null
                        }
                    }
                }
            }

## Delete organization [/queries{?delete_organization}]

Mutation to delete an organization, in case of success a query is returned.

- parameter:
    - organization id

**Request Body**
```
mutation {
    deleteOrganization(input: {id: 1}) {
        success
    }
}
```

### deleteOrganization(input: id) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_personal_access_token

    + Body

            { "query": "mutation { deleteOrganization(input: {id: 1}) { success } }" }
            
+ Response 200 (application/json; charset=utf-8)
    
    + Body
    
            {
                "data": {
                     "deleteOrganization": {
                        "card": {
                            "success": true
                        }
                    }
                }
            }

## Create webhook [/queries{?create_webhook}]

Mutation to create a webhook, in case of success a query is returned.

**Request Body**
```
mutation{
  createWebhook(
    input: {
      pipe_id: 219739
      name: "New Webhook"
      email: "severo.snape@gmail.com"
      url: "www.myurl.com/queries"
      actions: ["card.create", "card.done"]
      headers: "{\"foo\": \"bar\"}"
    }
  ) {
    webhook {
      id
      name
    }
  }
}
```

### createWebhook(input: {params}) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_personal_access_token

    + Body

            { 
                "query": "mutation { createWebhook(input: { pipe_id: 219739 name: \"New Webhook\" email: \"severo.snape@gmail.com\" url: \"www.myurl.com/queries\" actions: [\"card.create\", \"card.done\"] headers: \"{\\\"foo\\\": \\\"bar\\\"}\" }) { webhook { id name } } }"
            }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
              "data": {
                "createWebhook": {
                  "webhook": {
                    "id": "206",
                    "name": "New Webhook"
                  }
                }
              }
            }

## Update webhook [/queries{?update_webhook}]

Mutation to update a webhook, in case of success a query is returned.

**Request Body**
```
mutation{
  updateWebhook(
    input: {
      id: 206
      email: "newemail@pipefy.com"
      actions: ["card.create", "card.move"]
    }
  ) {
    webhook {
      id
      email
      actions
    }
  }
}
```

### updateWebhook(input: {params}) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_personal_access_token

    + Body

            { 
                "query": "mutation { updateWebhook(input: { id: 206 email: \"newemail@pipefy.com\" actions: [\"card.create\", \"card.move\"]}) { webhook { id email actions } } }"
            }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
              "data": {
                "updateWebhook": {
                  "webhook": {
                    "id": "206",
                    "email": "newemail@pipefy.com",
                    "actions": [
                      "card.create",
                      "card.move"
                    ]
                  }
                }
              }
            }

## Delete webhook [/queries{?delete_webhook}]

Mutation to delete a webhook, in case of success `success: true` is returned.

**Request Body**
```
mutation{
  deleteWebhook(input:{id: 206}) {
    success
  }
}
```

### deleteWebhook(input: {webhook_id}) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_personal_access_token

    + Body

            { 
                "query": "mutation { deleteWebhook(input: { id: 206 }) { success } }"
            }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
              "data": {
                "deleteWebhook": {
                  "success": true
                }
              }
            }